# -*- coding: utf-8 -*-
"""Perceptron Assignment 2.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1DeP7hFTG2zQOo8jwwL5mu2yij0KENtyd
"""

import numpy as np

import matplotlib.pyplot as plt

# Plotting function
def plot_hyperplane(w, b, iteration):
    plt.figure()
    # Convert x and y to NumPy arrays for array indexing
    x_np = np.array(x)
    y_np = np.array(y)
    plt.scatter(x_np[y_np == 1][:, 0], x_np[y_np == 1][:, 1], color='blue', marker='o', label='Class +1')
    plt.scatter(x_np[y_np == -1][:, 0], x_np[y_np == -1][:, 1], color='red', marker='x', label='Class -1')

    # Plot the hyperplane
    x1 = np.linspace(min(x_np[:, 0]) - 1, max(x_np[:, 0]) + 1, 100)
    x2 = -(w[0] * x1 + b) / w[1]
    plt.plot(x1, x2, label=f'Iteration {iteration}')

    plt.xlim(min(x_np[:, 0]) - 1, max(x_np[:, 0]) + 1)
    plt.ylim(min(x_np[:, 1]) - 1, max(x_np[:, 1]) + 1)
    plt.xlabel('x1')
    plt.ylabel('x2')
    plt.title(f'Hyperplane at Iteration {iteration}')
    plt.legend()
    plt.grid(True)
    plt.show()

#Data initialisation
x = [
    [1, 1],
    [2, -2],
    [-1, -1.5],
    [-2, -1],
    [-2, 1],
    [1.5, -0.5]
]

y = [+1, -1, -1, -1, +1, +1]

t = 0

w = [0,0]
b = 0

alpha = 1
t = 1

# Prediction

def predict(x,w,b):
    return np.sign(np.dot(w, x) + b)

# Iteration

for i in range(len(x)):
    if predict(x[i],w,b) != y[i]:
      for j in range(len(w)):
        w[j] = w[j] + alpha * y[i] * x[i][j]
        # print(w[j])
      b = b + alpha * y[i]

    print(f"Iteration {t}")
    print(f"w = {w}")
    print(f"b = {b}")
    plot_hyperplane(w, b, t)
    t += 1

print(f"\nFinal Result")
print(f"w = {w}")
print(f"b = {b}")

